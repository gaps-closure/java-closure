from json                                   import loads,dump
from argparse                               import ArgumentParser

from java.lang                              import Class
from java.lang                              import System
from java.io                                import FileOutputStream
from com.ibm.wala.util                      import NullProgressMonitor
from edu.kit.joana.api.sdg                  import SDGConfig
from edu.kit.joana.api.sdg                  import SDGProgram
from edu.kit.joana.ifc.sdg.graph            import SDGSerializer
from edu.kit.joana.ifc.sdg.mhpoptimization  import MHPType
from edu.kit.joana.ifc.sdg.util             import JavaMethodSignature
from edu.kit.joana.util                     import Stubs
from edu.kit.joana.wala.core.SDGBuilder     import PointsToPrecision
from edu.kit.joana.wala.core.SDGBuilder     import ExceptionAnalysis
from edu.kit.joana.ifc.sdg.io.dot           import JoanaGraph2Dot

from java.util                              import Enumeration;
from java.util.jar                          import JarEntry;
from java.util.jar                          import JarFile;

def getClasses(cp):
  for e in JarFile(cp).entries():
    if e.getName().endswith('.class'):
      cnm = e.getName().replace('/','.').replace('.class','')
      try:                   
        yield cnm,Class.forName(cnm)
      except Exception as e: 
        print('Error getting class ' + cnm + ':' + str(e))

def dumpCLE(cp, clefile):
  cles = []
  for cnm,cls in getClasses(cp):
    if cls.isAnnotation():
      for x in cls.getDeclaredAnnotations():
        if x.annotationType().getName().endswith('Cledef'): 
          try:
            j = loads(x.clejson())
            cles.append(dict(clelabel=cnm,clejson=j))
          except Exception as e:
            print('CLE JSON failed for ' + x.toString())
  with open(clefile,'w') as of: dump(cles, of, indent=2, sort_keys=True)
  print('CLEJSON Generated\n')

def makeSDG(cp, em, pdg=None, dot=None):
  classPath   = cp
  entryMethod = JavaMethodSignature.mainMethodOfClass(em)
  config      = SDGConfig(classPath, entryMethod.toBCString(), Stubs.JRE_15)
  config.setComputeInterferences(True)
  config.setMhpType(MHPType.PRECISE)
  config.setPointsToPrecision(PointsToPrecision.INSTANCE_BASED)
  config.setExceptionAnalysis(ExceptionAnalysis.INTERPROC)
  program = SDGProgram.createSDGProgram(config, System.out, NullProgressMonitor())
  if pdg is not None:
    SDGSerializer.toPDGFormat(program.getSDG(), FileOutputStream(pdg))
    print('PDG Generated\n')
  if dot is not None:
    JoanaGraph2Dot.writeDotToOutputStream(program.getSDG(), FileOutputStream(dot))
    print('DOT Generated\n')
  return program

def get_args():
  p = ArgumentParser(description='CLOSURE System Dependence Graph Builder for Java')
  p.add_argument('-e', '--entrymethod', required=True, type=str, help='Entry Method')
  p.add_argument('-c', '--clpath', required=True, type=str, help='Jar file for program to be analyzed')
  p.add_argument('-p', '--pdg', help='Dump Program Dependence Graph in native format',
                 default=False, action='store_true') 
  p.add_argument('-P', '--pdgfile', help='PDG filename', 
                 required=False, type=str, default='yourSDGFile.pdg')
  p.add_argument('-d', '--dot',help='Dump Program Dependence Graph in Dot format',
                 default=False, action='store_true') 
  p.add_argument('-D', '--dotfile', help='DOT filename',
                 required=False, type=str, default='yourSDGFile.dot')
  p.add_argument('-J', '--jsonfile', help='CLE JSON output filename', 
                 required=False, type=str, default='yourSDGFile.clemap.json')
  return p.parse_args()
  
if __name__ == '__main__':
  args   = get_args()
  print('Options selected:')
  for x in sorted(vars(args).items()): print('  %s: %s' % x)
  pf = args.pdgfile if args.pdg else None
  df = args.dotfile if args.dot else None
  makeSDG(args.clpath, args.entrymethod, pdg=pf, dot=df)
  dumpCLE(args.clpath, args.jsonfile)
